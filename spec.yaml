# Definição para a API da Mensagem Ágil

openapi: 3.0.0
servers:
  - url: https//mensagemagil.com.br/api
  #   description: Servidor padrão
  # - url: https//sandbox.mensagemagil.com.br/api
  #   description: Servidor de sandbox
info:
  version: 1.0.0
  title: Mensagem Ágil
  contact:
    name: Suporte à API                 # TODO: confirmar com o Allan ou Fábio
    email: api@mensagemagil.com.br      #       se realmente há um endereço de
    url: https://mensagemagil.com.br    #       e-mail para contato!!!
  x-logo:
    url: https://mensagemagil.com.br/assets/img/logo.png
    altText: 'Logo da Mensagem Ágil'
  description: |
    A API da Mensagem Ágil é uma API REST para as funcionalidades oferecidas pelo [site](https://mensagemagil.com.br), como o envio de SMS e a consulta do saldo.

    # Erros
    A API usa códigos de status HTTP para indicar o sucesso ou a falha da chamada da API.

    O corpo da resposta será em JSON no seguinte formato:

    ```
    {
      "message": "Message and destination are required"
    }
    ```

    # Autenticação
    A única forma de autenticação com a API é através da **_api_key_**.

    Se você não souber qual é a sua *api_key*, visite <https://mensagemagil.com.br/user/sms-api/info>.

    <security-definitions /> 

tags:
  - name: Mensagens
    description: Ações para envio de mensagens.

paths:
  /sms:
    post:
      tags:
        - Mensagens
      summary: SMS para um destinatário
      description: Envie um SMS para apenas um destinatário especificado.
      operationId: sms_1_1
      requestBody:
        description: Instruções para enviar a mensagem de SMS
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Sms'
      responses:
        '405':
          description: Invalid input
      security:
        - api_key: []
      # x-code-samples:
      #   - lang: PHP
      #     source: |
      #       $form = new \PetStore\Entities\Pet();
      #       $form->setPetType("Dog");
      #       $form->setName("Rex");
      #       // set other fields
      #       try {
      #           $pet = $client->pets()->create($form);
      #       } catch (UnprocessableEntityException $e) {
      #           var_dump($e->getErrors());
      #       }

components:
  securitySchemes:
    api_key:
      description: |
        A chave da API é valor único para cada cliente e é utilizada para identificar cada usuário.

        Para usar a chave, informe como um parâmetro da _query string_ em todas as chamadas à API.

        > http://mensagemagil.com.br/api/sms?api_key=&lt;API_KEY&gt;
      type: apiKey
      name: api_key
      in: query
  schemas:
    ApiResponse:
      type: object
      properties:
        code:
          type: integer
          format: int32
        type:
          type: string
        message:
          type: string
    Cat:
      description: A representation of a cat
      allOf:
        - $ref: '#/components/schemas/Pet'
        - type: object
          properties:
            huntingSkill:
              type: string
              description: The measured skill for hunting
              default: lazy
              enum:
                - clueless
                - lazy
                - adventurous
                - aggressive
          required:
            - huntingSkill
    Category:
      type: object
      properties:
        id:
          description: Category ID
          allOf:
            - $ref: '#/components/schemas/Id'
        name:
          description: Category name
          type: string
          minLength: 1
        sub:
          description: Test Sub Category
          type: object
          properties:
            prop1:
              type: string
              description: Dumb Property
      xml:
        name: Category
    Dog:
      description: A representation of a dog
      allOf:
        - $ref: '#/components/schemas/Pet'
        - type: object
          properties:
            packSize:
              type: integer
              format: int32
              description: The size of the pack the dog is from
              default: 1
              minimum: 1
          required:
            - packSize
    HoneyBee:
      description: A representation of a honey bee
      allOf:
        - $ref: '#/components/schemas/Pet'
        - type: object
          properties:
            honeyPerDay:
              type: number
              description: Average amount of honey produced per day in ounces
              example: 3.14
          required:
            - honeyPerDay
    Id:
      type: integer
      format: int64
      readOnly: true
    Order:
      type: object
      properties:
        id:
          description: Order ID
          allOf:
            - $ref: '#/components/schemas/Id'
        petId:
          description: Pet ID
          allOf:
            - $ref: '#/components/schemas/Id'
        quantity:
          type: integer
          format: int32
          minimum: 1
          default: 1
        shipDate:
          description: Estimated ship date
          type: string
          format: date-time
        status:
          type: string
          description: Order Status
          enum:
            - placed
            - approved
            - delivered
        complete:
          description: Indicates whenever order was completed or not
          type: boolean
          default: false
      xml:
        name: Order
    Pet:
      type: object
      required:
        - name
        - photoUrls
      discriminator:
        propertyName: petType
        mapping:
          cat: '#/components/schemas/Cat'
          dog: '#/components/schemas/Dog'
          bee: '#/components/schemas/HoneyBee'
      properties:
        id:
          externalDocs:
            description: "Find more info here"
            url: "https://example.com"
          description: Pet ID
          allOf:
            - $ref: '#/components/schemas/Id'
        category:
          description: Categories this pet belongs to
          allOf:
            - $ref: '#/components/schemas/Category'
        name:
          description: The name given to a pet
          type: string
          example: Guru
        photoUrls:
          description: The list of URL to a cute photos featuring pet
          type: array
          xml:
            name: photoUrl
            wrapped: true
          items:
            type: string
            format: url
        friend:
          allOf:
            - $ref: '#/components/schemas/Pet'
        tags:
          description: Tags attached to the pet
          type: array
          xml:
            name: tag
            wrapped: true
          items:
            $ref: '#/components/schemas/Tag'
        status:
          type: string
          description: Pet status in the store
          enum:
            - available
            - pending
            - sold
        petType:
          description: Type of a pet
          type: string
      xml:
        name: Pet
    Tag:
      type: object
      properties:
        id:
          description: Tag ID
          allOf:
            - $ref: '#/components/schemas/Id'
        name:
          description: Tag name
          type: string
          minLength: 1
      xml:
        name: Tag
    User:
      type: object
      properties:
        id:
          $ref: '#/components/schemas/Id'
        pet:
          oneOf:
            - $ref: '#/components/schemas/Pet'
            - $ref: '#/components/schemas/Tag'
        username:
          description: User supplied username
          type: string
          minLength: 4
          example: John78
        firstName:
          description: User first name
          type: string
          minLength: 1
          example: John
        lastName:
          description: User last name
          type: string
          minLength: 1
          example: Smith
        email:
          description: User email address
          type: string
          format: email
          example: john.smith@example.com
        password:
          type: string
          description: >-
            User password, MUST contain a mix of upper and lower case letters,
            as well as digits
          format: password
          minLength: 8
          pattern: '(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])'
          example: drowssaP123
        phone:
          description: User phone number in international format
          type: string
          pattern: '^\+(?:[0-9]-?){6,14}[0-9]$'
          example: +1-202-555-0192
          nullable: true
        userStatus:
          description: User status
          type: integer
          format: int32
      xml:
        name: User
    Sms:
      type: object
      properties:
        from:
          description: Remetente da mensagem de SMS.
          type: string
        to:
          description: Destinatário da mensagem de SMS. Deve ser um número de telefone móvel incluindo o código do país e o DDD.
          type: string
        message:
          description: O texto da mensagem de SMS a ser enviada.
          type: string
        unicode:
          description: |
            Quando o texto da mensagem precisa ser enviado com acentuação, você deve ativar essa opção.
            Passe o valor `1` ou `0` para ativar ou desativar esse parâmetro.
            
            Essa opção normalmente implica em maior custo, pois mais mensagens podem precisar ser enviadas.
          type: integer
          enum: [0, 1]
      required:
        - from
        - to
        - message
  requestBodies: {}
  responses: {}
